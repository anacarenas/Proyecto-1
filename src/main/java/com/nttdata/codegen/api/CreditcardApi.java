/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.codegen.api;

import com.nttdata.codegen.model.CreditCard;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-20T21:35:28.437065300-05:00[America/Bogota]")
@Validated
@Tag(name = "credits", description = "Operaciones relacionadas con créditos (Credit y CreditCard)")
public interface CreditcardApi {

    default CreditcardApiDelegate getDelegate() {
        return new CreditcardApiDelegate() {};
    }

    /**
     * GET /creditcard : Obtener lista de tarjetas de crédito
     * Retorna una lista de todas las tarjetas de crédito registradas.
     *
     * @return Lista de tarjetas de crédito obtenida exitosamente (status code 200)
     */
    @Operation(
        operationId = "creditcardGet",
        summary = "Obtener lista de tarjetas de crédito",
        description = "Retorna una lista de todas las tarjetas de crédito registradas.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de tarjetas de crédito obtenida exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/creditcard",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditcardGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditcardGet(exchange);
    }


    /**
     * DELETE /creditcard/{id} : Eliminar una tarjeta de crédito
     * Permite eliminar una tarjeta de crédito existente del sistema.
     *
     * @param id ID único de la tarjeta de crédito (required)
     * @return Tarjeta de crédito eliminada exitosamente (status code 204)
     */
    @Operation(
        operationId = "creditcardIdDelete",
        summary = "Eliminar una tarjeta de crédito",
        description = "Permite eliminar una tarjeta de crédito existente del sistema.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Tarjeta de crédito eliminada exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/creditcard/{id}"
    )
    default Mono<ResponseEntity<Void>> creditcardIdDelete(
        @Parameter(name = "id", description = "ID único de la tarjeta de crédito", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditcardIdDelete(id, exchange);
    }


    /**
     * GET /creditcard/{id} : Obtener detalles de una tarjeta de crédito por ID
     * Retorna los detalles de una tarjeta de crédito específica según su ID.
     *
     * @param id ID único de la tarjeta de crédito (required)
     * @return Detalles de la tarjeta de crédito obtenidos exitosamente (status code 200)
     */
    @Operation(
        operationId = "creditcardIdGet",
        summary = "Obtener detalles de una tarjeta de crédito por ID",
        description = "Retorna los detalles de una tarjeta de crédito específica según su ID.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles de la tarjeta de crédito obtenidos exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/creditcard/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditcardIdGet(
        @Parameter(name = "id", description = "ID único de la tarjeta de crédito", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditcardIdGet(id, exchange);
    }


    /**
     * PUT /creditcard/{id} : Actualizar una tarjeta de crédito existente
     * Permite actualizar la información de una tarjeta de crédito existente en el sistema.
     *
     * @param id ID único de la tarjeta de crédito (required)
     * @param creditCard  (required)
     * @return Tarjeta de crédito actualizada exitosamente (status code 200)
     *         or Solicitud incorrecta (status code 400)
     */
    @Operation(
        operationId = "creditcardIdPut",
        summary = "Actualizar una tarjeta de crédito existente",
        description = "Permite actualizar la información de una tarjeta de crédito existente en el sistema.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tarjeta de crédito actualizada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/creditcard/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditcardIdPut(
        @Parameter(name = "id", description = "ID único de la tarjeta de crédito", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreditCard", description = "", required = true) @Valid @RequestBody Mono<CreditCard> creditCard,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditcardIdPut(id, creditCard, exchange);
    }


    /**
     * POST /creditcard : Crear una nueva tarjeta de crédito
     * Permite registrar una nueva tarjeta de crédito en el sistema.
     *
     * @param creditCard  (required)
     * @return Tarjeta de crédito creada exitosamente (status code 201)
     *         or Solicitud incorrecta (status code 400)
     */
    @Operation(
        operationId = "creditcardPost",
        summary = "Crear una nueva tarjeta de crédito",
        description = "Permite registrar una nueva tarjeta de crédito en el sistema.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Tarjeta de crédito creada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/creditcard",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditcardPost(
        @Parameter(name = "CreditCard", description = "", required = true) @Valid @RequestBody Mono<CreditCard> creditCard,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditcardPost(creditCard, exchange);
    }

}
