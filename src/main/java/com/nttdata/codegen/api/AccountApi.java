/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.codegen.api;

import com.nttdata.codegen.model.Account;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-20T21:35:28.437065300-05:00[America/Bogota]")
@Validated
@Tag(name = "account", description = "Operaciones relacionadas con cuentas")
public interface AccountApi {

    default AccountApiDelegate getDelegate() {
        return new AccountApiDelegate() {};
    }

    /**
     * GET /account : Obtener lista de cuentas (Account)
     * Retorna una lista de todas las cuentas registradas.
     *
     * @return Lista de cuentas obtenida exitosamente (status code 200)
     */
    @Operation(
        operationId = "accountGet",
        summary = "Obtener lista de cuentas (Account)",
        description = "Retorna una lista de todas las cuentas registradas.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de cuentas obtenida exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/account",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> accountGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().accountGet(exchange);
    }


    /**
     * DELETE /account/{id} : Eliminar una cuenta (Account)
     * Permite eliminar una cuenta según su ID.
     *
     * @param id  (required)
     * @return Cuenta eliminada exitosamente (status code 204)
     *         or Cuenta no encontrada (status code 404)
     */
    @Operation(
        operationId = "accountIdDelete",
        summary = "Eliminar una cuenta (Account)",
        description = "Permite eliminar una cuenta según su ID.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Cuenta eliminada exitosamente"),
            @ApiResponse(responseCode = "404", description = "Cuenta no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/account/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> accountIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().accountIdDelete(id, exchange);
    }


    /**
     * GET /account/{id} : Obtener detalles de una cuenta (Account) por ID
     * Retorna los detalles de una cuenta específica según su ID.
     *
     * @param id  (required)
     * @return Detalles de la cuenta obtenidos exitosamente (status code 200)
     *         or Cuenta no encontrada (status code 404)
     */
    @Operation(
        operationId = "accountIdGet",
        summary = "Obtener detalles de una cuenta (Account) por ID",
        description = "Retorna los detalles de una cuenta específica según su ID.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles de la cuenta obtenidos exitosamente"),
            @ApiResponse(responseCode = "404", description = "Cuenta no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/account/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> accountIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().accountIdGet(id, exchange);
    }


    /**
     * PUT /account/{id} : Actualizar una cuenta (Account) existente
     * Permite actualizar los detalles de una cuenta existente.
     *
     * @param id  (required)
     * @param account  (required)
     * @return Cuenta actualizada exitosamente (status code 200)
     *         or Solicitud incorrecta (status code 400)
     *         or Cuenta no encontrada (status code 404)
     */
    @Operation(
        operationId = "accountIdPut",
        summary = "Actualizar una cuenta (Account) existente",
        description = "Permite actualizar los detalles de una cuenta existente.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Cuenta actualizada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta"),
            @ApiResponse(responseCode = "404", description = "Cuenta no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/account/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> accountIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Account", description = "", required = true) @Valid @RequestBody Mono<Account> account,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().accountIdPut(id, account, exchange);
    }


    /**
     * POST /account : Crear una nueva cuenta (Account)
     * Permite registrar una nueva cuenta en el sistema.
     *
     * @param account  (required)
     * @return Cuenta creada exitosamente (status code 201)
     *         or Solicitud incorrecta (status code 400)
     */
    @Operation(
        operationId = "accountPost",
        summary = "Crear una nueva cuenta (Account)",
        description = "Permite registrar una nueva cuenta en el sistema.",
        tags = { "account" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Cuenta creada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/account",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> accountPost(
        @Parameter(name = "Account", description = "", required = true) @Valid @RequestBody Mono<Account> account,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().accountPost(account, exchange);
    }

}
