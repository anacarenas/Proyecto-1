/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.codegen.api;

import com.nttdata.codegen.model.Credit;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-20T21:35:28.437065300-05:00[America/Bogota]")
@Validated
@Tag(name = "credits", description = "Operaciones relacionadas con créditos (Credit y CreditCard)")
public interface CreditApi {

    default CreditApiDelegate getDelegate() {
        return new CreditApiDelegate() {};
    }

    /**
     * GET /credit : Obtener lista de créditos
     * Retorna una lista de todos los créditos registrados.
     *
     * @return Lista de créditos obtenida exitosamente (status code 200)
     */
    @Operation(
        operationId = "creditGet",
        summary = "Obtener lista de créditos",
        description = "Retorna una lista de todos los créditos registrados.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de créditos obtenida exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/credit",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditGet(exchange);
    }


    /**
     * DELETE /credit/{id} : Eliminar un crédito
     * Permite eliminar un crédito existente del sistema.
     *
     * @param id ID único del crédito (required)
     * @return Crédito eliminado exitosamente (status code 204)
     */
    @Operation(
        operationId = "creditIdDelete",
        summary = "Eliminar un crédito",
        description = "Permite eliminar un crédito existente del sistema.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Crédito eliminado exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/credit/{id}"
    )
    default Mono<ResponseEntity<Void>> creditIdDelete(
        @Parameter(name = "id", description = "ID único del crédito", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditIdDelete(id, exchange);
    }


    /**
     * GET /credit/{id} : Obtener detalles de un crédito por ID
     * Retorna los detalles de un crédito específico según su ID.
     *
     * @param id ID único del crédito (required)
     * @return Detalles del crédito obtenidos exitosamente (status code 200)
     */
    @Operation(
        operationId = "creditIdGet",
        summary = "Obtener detalles de un crédito por ID",
        description = "Retorna los detalles de un crédito específico según su ID.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles del crédito obtenidos exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/credit/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditIdGet(
        @Parameter(name = "id", description = "ID único del crédito", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditIdGet(id, exchange);
    }


    /**
     * PUT /credit/{id} : Actualizar un crédito existente
     * Permite actualizar la información de un crédito existente en el sistema.
     *
     * @param id ID único del crédito (required)
     * @param credit  (required)
     * @return Crédito actualizado exitosamente (status code 200)
     *         or Solicitud incorrecta (status code 400)
     */
    @Operation(
        operationId = "creditIdPut",
        summary = "Actualizar un crédito existente",
        description = "Permite actualizar la información de un crédito existente en el sistema.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Crédito actualizado exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/credit/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditIdPut(
        @Parameter(name = "id", description = "ID único del crédito", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Credit", description = "", required = true) @Valid @RequestBody Mono<Credit> credit,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditIdPut(id, credit, exchange);
    }


    /**
     * POST /credit : Crear un nuevo crédito
     * Permite registrar un nuevo crédito en el sistema.
     *
     * @param credit  (required)
     * @return Crédito creado exitosamente (status code 201)
     *         or Solicitud incorrecta (status code 400)
     */
    @Operation(
        operationId = "creditPost",
        summary = "Crear un nuevo crédito",
        description = "Permite registrar un nuevo crédito en el sistema.",
        tags = { "credits" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Crédito creado exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/credit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> creditPost(
        @Parameter(name = "Credit", description = "", required = true) @Valid @RequestBody Mono<Credit> credit,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().creditPost(credit, exchange);
    }

}
