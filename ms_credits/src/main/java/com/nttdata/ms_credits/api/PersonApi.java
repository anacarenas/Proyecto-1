/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.ms_credits.api;

import com.nttdata.ms_credits.model.Person;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-23T20:04:37.520989500-05:00[America/Bogota]")
@Validated
@Tag(name = "customer", description = "Operaciones relacionadas con clientes")
public interface PersonApi {

    default PersonApiDelegate getDelegate() {
        return new PersonApiDelegate() {};
    }

    /**
     * GET /person : Obtener lista de personas (Person)
     * Retorna una lista de todas las personas registradas.
     *
     * @return Lista de personas obtenida exitosamente (status code 200)
     */
    @Operation(
        operationId = "personGet",
        summary = "Obtener lista de personas (Person)",
        description = "Retorna una lista de todas las personas registradas.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de personas obtenida exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/person",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> personGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().personGet(exchange);
    }


    /**
     * DELETE /person/{id} : Eliminar una persona (Person)
     * Permite eliminar una persona según su ID.
     *
     * @param id  (required)
     * @return Persona eliminada exitosamente (status code 204)
     *         or Persona no encontrada (status code 404)
     */
    @Operation(
        operationId = "personIdDelete",
        summary = "Eliminar una persona (Person)",
        description = "Permite eliminar una persona según su ID.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Persona eliminada exitosamente"),
            @ApiResponse(responseCode = "404", description = "Persona no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/person/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> personIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().personIdDelete(id, exchange);
    }


    /**
     * GET /person/{id} : Obtener detalles de una persona (Person) por ID
     * Retorna los detalles de una persona específica según su ID.
     *
     * @param id  (required)
     * @return Detalles de la persona obtenidos exitosamente (status code 200)
     *         or Persona no encontrada (status code 404)
     */
    @Operation(
        operationId = "personIdGet",
        summary = "Obtener detalles de una persona (Person) por ID",
        description = "Retorna los detalles de una persona específica según su ID.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles de la persona obtenidos exitosamente"),
            @ApiResponse(responseCode = "404", description = "Persona no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/person/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> personIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().personIdGet(id, exchange);
    }


    /**
     * PUT /person/{id} : Actualizar una persona (Person) existente
     * Permite actualizar los detalles de una persona existente.
     *
     * @param id  (required)
     * @param person  (required)
     * @return Persona actualizada exitosamente (status code 200)
     *         or Solicitud incorrecta (status code 400)
     *         or Persona no encontrada (status code 404)
     */
    @Operation(
        operationId = "personIdPut",
        summary = "Actualizar una persona (Person) existente",
        description = "Permite actualizar los detalles de una persona existente.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Persona actualizada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta"),
            @ApiResponse(responseCode = "404", description = "Persona no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/person/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> personIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Person", description = "", required = true) @Valid @RequestBody Mono<Person> person,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().personIdPut(id, person, exchange);
    }


    /**
     * POST /person : Crear una nueva persona (Person)
     * Permite registrar una nueva persona en el sistema.
     *
     * @param person  (required)
     * @return Persona creada exitosamente (status code 201)
     *         or Solicitud incorrecta (status code 400)
     */
    @Operation(
        operationId = "personPost",
        summary = "Crear una nueva persona (Person)",
        description = "Permite registrar una nueva persona en el sistema.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Persona creada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/person",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> personPost(
        @Parameter(name = "Person", description = "", required = true) @Valid @RequestBody Mono<Person> person,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().personPost(person, exchange);
    }

}
