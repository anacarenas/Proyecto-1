/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.ms_customers.api;

import com.nttdata.ms_customers.model.Company;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-23T20:04:37.520989500-05:00[America/Bogota]")
@Validated
@Tag(name = "customer", description = "Operaciones relacionadas con clientes")
public interface CompanyApi {

    default CompanyApiDelegate getDelegate() {
        return new CompanyApiDelegate() {};
    }

    /**
     * GET /company : Obtener lista de empresas (Company)
     * Retorna una lista de todas las empresas registradas.
     *
     * @return Lista de empresas obtenida exitosamente (status code 200)
     */
    @Operation(
        operationId = "companyGet",
        summary = "Obtener lista de empresas (Company)",
        description = "Retorna una lista de todas las empresas registradas.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de empresas obtenida exitosamente")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/company",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<?>> companyGet(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().companyGet(exchange);
    }


    /**
     * DELETE /company/{id} : Eliminar una empresa (Company)
     * Permite eliminar una empresa según su ID.
     *
     * @param id  (required)
     * @return Empresa eliminada exitosamente (status code 204)
     *         or Empresa no encontrada (status code 404)
     */
    @Operation(
        operationId = "companyIdDelete",
        summary = "Eliminar una empresa (Company)",
        description = "Permite eliminar una empresa según su ID.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Empresa eliminada exitosamente"),
            @ApiResponse(responseCode = "404", description = "Empresa no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/company/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Object>> companyIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().companyIdDelete(id, exchange);
    }


    /**
     * GET /company/{id} : Obtener detalles de una empresa (Company) por ID
     * Retorna los detalles de una empresa específica según su ID.
     *
     * @param id  (required)
     * @return Detalles de la empresa obtenidos exitosamente (status code 200)
     *         or Empresa no encontrada (status code 404)
     */
    @Operation(
        operationId = "companyIdGet",
        summary = "Obtener detalles de una empresa (Company) por ID",
        description = "Retorna los detalles de una empresa específica según su ID.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalles de la empresa obtenidos exitosamente"),
            @ApiResponse(responseCode = "404", description = "Empresa no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/company/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Object>> companyIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().companyIdGet(id, exchange);
    }


    /**
     * PUT /company/{id} : Actualizar una empresa (Company) existente
     * Permite actualizar los detalles de una empresa existente.
     *
     * @param id  (required)
     * @param company  (required)
     * @return Empresa actualizada exitosamente (status code 200)
     *         or Solicitud incorrecta (status code 400)
     *         or Empresa no encontrada (status code 404)
     */
    @Operation(
        operationId = "companyIdPut",
        summary = "Actualizar una empresa (Company) existente",
        description = "Permite actualizar los detalles de una empresa existente.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Empresa actualizada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta"),
            @ApiResponse(responseCode = "404", description = "Empresa no encontrada")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/company/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Object>> companyIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Company", description = "", required = true) @Valid @RequestBody Mono<Company> company,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().companyIdPut(id, company, exchange);
    }


    /**
     * POST /company : Crear una nueva empresa (Company)
     * Permite registrar una nueva empresa en el sistema.
     *
     * @param company  (required)
     * @return Empresa creada exitosamente (status code 201)
     *         or Solicitud incorrecta (status code 400)
     */
    @Operation(
        operationId = "companyPost",
        summary = "Crear una nueva empresa (Company)",
        description = "Permite registrar una nueva empresa en el sistema.",
        tags = { "customer" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Empresa creada exitosamente"),
            @ApiResponse(responseCode = "400", description = "Solicitud incorrecta")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/company",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> companyPost(
        @Parameter(name = "Company", description = "", required = true) @Valid @RequestBody Mono<Company> company,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getDelegate().companyPost(company, exchange);
    }

}
